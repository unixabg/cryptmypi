###############################################################################
## cryptmypi profile ##########################################################


# EXAMPLE OF A ENCRYPTED KALI CONFIGURATION, USING ALL AVAILABLE OPTIONAL HOOKS
#   Will create a encrypted kali system:
#   - "optional-sys-gpugovernor-ondemand" that changes the cpugovernor to
#       ondemand, specially usefull when the RPi will run using batteries
#
#   - during boot the encryption password will be prompted
#   - the luks password unlock can be done thorugh ssh (dropbear)
#   - the dorpbear ssh port will be exposed to the internet using sshhub.de
#       (reverse ssh jump thorugh sshhub.de server)
#   - wifi will be configured in initramfs so that the RPi does not need wired
#       connection (even at the boot unlocking ecnryption process at initramfs)
#   - a luks nuke password is configured, just in case
#
#   - ssh server will available after boot
#       The id_rsa.pub public key will be added to authorized_keys
#   - "optional-sys-dns" that preconfigures DNS to google (see vars bellow)
#   - "optional-sys-sshhub" that exposes the ssh server to the internet
#       thorugh sshhub.de using reverse ssh jumps, eliminating the neet
#       of router port forarding (after boot). Local ssh config is changed so
#       alias is defined and simplifies connection (and usage of other tools,
#       such as git, rsync, etc).
#   - "optional-sys-rootpassword" that sets root password
#   - "optional-sys-wifi" that pre configures wifi on system (after boot)
#   - "optional-sys-vpnclient" configures vpn
#
#   - IODINE hook is not enabled, but may work. Not tested, work may be needed
#       on it, as initrafs and sys configs are not separated. It would tunnel
#       traffic thorugh DNS, bypassing most firewalls.


# General settings ------------------------------------------------------------

# You need to choose an kernel compatible with your RPi version.
#   Kali RPi images name its kernels:
#   - Re4son+ is for armv6 devices (ie. RPi1, RPi0, and RPi0w)
#   - v7+ and v8+ sufixes are for the 32bit and 64bit armv7 devices (ie. RPi 3)
#   - l+ sufix in the name means they will be ready for the RPi4.
export _KERNEL_VERSION_FILTER="v8+"

# HOSTNAME
#   Each element of the hostname must be from 1 to 63 characters long and
#   the entire hostname, including the dots, can be at most 253
#   characters long.  Valid characters for hostnames are ASCII(7) letters
#   from a to z, the digits from 0 to 9, and the hyphen (-)
export _HOSTNAME="super-rpi-kali"

# BLOCK DEVICE
#   The SD card or USD SD card reader block device
#   - USB drives will show up as the normal /dev/sdb, /dev/sdc, etc.
#   - MMC/SDcards may show up the same way if the card reader is USB-connected.
#   - Internal card readers normally show up as /dev/mmcblk0, /dev/mmcblk1, ...
#   You can use the lsblk command to get an easy quick view of all block
#   devices on your system at a given moment.
export _BLKDEV="/dev/sdb"


# LUKS ENCRYPTION -------------------------------------------------------------
## Encryption Cypher
export _LUKSCIPHER="aes-cbc-essiv:sha256"

## Encryption Password
export _LUKSPASSWD="luks_encryption_password"


# LINUX IMAGE FILE ------------------------------------------------------------
export _IMAGEURL=https://images.offensive-security.com/arm-images/kali-linux-2020.1a-rpi3-nexmon-64.img.xz


# PACKAGE ACTIONS -------------------------------------------------------------
export _PKGSPURGE=""
export _PKGSINSTALL="macchanger"


# MINIMAL SSH CONFIG ----------------------------------------------------------
#   Keyfile to be used to access the system remotelly through ssh.
#   Its public key will be added to the system's root .ssh/autorized_keys
export _SSH_LOCAL_KEYFILE="/home/kali/.ssh/id_rsa"


###############################################################################
## Stage 1 Settings ###########################################################

# Custom Stage1 Profile
#   Check functions/stage1profiles.fns for reference. You may instruct hooks
#   here or you may call one predefined stage1profile functions.
# Optional: if stage1_hooks function is not defined, a prompt will be displayed
stage1_hooks(){
    myhooks "stage1"
}

# Optional stage 1 hooks
#   If declared, this function is called during stage1 build by the
#   stage1-runoptional hook.
#
#   Optional function: can be ommited.
stage1_optional_hooks(){
    myhooks "experimental-initramfs-wifi"
    myhooks "optional-initramfs-sshhub"
    myhooks "optional-initramfs-luksnuke"
    myhooks "optional-sys-gpugovernor-ondemand"
    myhooks "optional-sys-dns"
}

###############################################################################
## Stage-2 Settings ###########################################################

# Optional stage 2 hooks
#   If declared, this function is called during stage2 build by the
#   stage2-runoptional hook.
#
#   Optional function: can be ommited.
stage2_optional_hooks(){
    myhooks "optional-sys-rootpassword"
    myhooks "optional-sys-vpnclient"
    myhooks "optional-sys-sshhub"
    myhooks "optional-sys-wifi"
}


###############################################################################
##Optional Hook Settings #####################################################


# LUKSNUKE settings -----------------------------------------------------------
# Hooks
#   optional-initramfs-luksnuke
#       Sets LUKS nuke password. When used, nuke erases the encrypted headers.

## Nuke password
export _LUKSNUKEPASSWD="nuke"


# IODINE settings -------------------------------------------------------------
# Hooks
#   untested-optional-initramfs-iodinepi
#       Configures IODINE to allow DNS tunneling of dataat intrafs, so that
#       trafic is harder to be detected and firewalls can be bypassed.

## IODINE Domain
export _IODINE_DOMAIN=""

## IODINE Password
export _IODINE_PASSWORD=""


# SSHHUB.de settings ----------------------------------------------------------
#   Exposes ssh to the internet, with reverse ssh forwarding, eliminating the
#   need of port forwarding configuration in routers and firewalls.
# Hooks
#   optional-initramfs-sshhub
#       Exposes initramfs dropbear unlocking ssh service
#   optional-sys-sshhub
#       Exposes system's ssh service

## sshhub.de username
export _SSHHUB_USERNAME="the_user"

## Local keyfile to be used to access sshhub.de
# Optional variable (default: none)
export _SSHHUB_LOCAL_KEYFILE="/home/kali/.ssh/id_rsa"

## PIs computer name to be used on sshhub.de
# Optional variable (default: _HOSTNAME)
export _SSHHUB_COMPUTER=""

## Port that should be exposed by PI's system on sshhub.de
# Optional variable (default: 22)
export _SSHHUB_SSH_PORT=""

## Port that should be exposed by PI's initramfs (to unlock luks) on sshhub.de
# Optional variable (default: 2222)
export _SSHHUB_SSHLUKS_PORT=""


# DNS settings ----------------------------------------------------------------
#   Sets DNS servers to be used by the system
# Hooks
#   preconditions-dns
#   optional-sys-dns
#   optional-initramfs-sshhub
#   experimental-initramfs-wifi
#   optional-sys-wifi

# Optional variable (default: "1.1.1.1")
export _DNS1='1.1.1.1'

# Optional variable (default: "8.8.8.8")
export _DNS2='8.8.8.8'


# WIFI settings ---------------------------------------------------------------
# Hooks
#   optional-initramfs-wifi
#       Attempts to set wifi up at initramfs, so one can wirelessly expose
#       dropbear's LUKS unlocking mechanism (without ethernet).
#   optional-sys-wifi
#       Attemps to preconfigure system wifi.

## SSID the network name
export _WIFI_SSID='SKYNET'

## Wifi network password
export _WIFI_PASS='helloworld'

## Wifi interface to be used
# Optional variable (default: 'wlan0')
export _WIFI_INTERFACE='wlan0'

## Wifi interface to be used at boot (for unlocking)
# Optional variable (default: 'wlan0')
export _INITRAMFS_WIFI_INTERFACE='wlan0'

## Kernel IP param
#     This parameter tells the kernel how to configure IP addresses of devices
#     and also how to set up the IP routing table. If this parameter is missing
#     from the kernel command line, all fields are assumed to be empty, and the
#     defaults mentioned below apply. In general this means that the kernel
#     tries to configure everything using autoconfiguration.
#
#            ip=<client-ip>:<server-ip>:<gw-ip>:<netmask>:
#                <hostname>:<device>:<autoconf>:<dns0-ip>:<dns1-ip>
#
#     For more info, check
#         https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
# Optional variable (default: ':::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}:')
export _INITRAMFS_WIFI_IP=":::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}"

## Modules to load at the initramfs, add your wifi firmware and drivers here
#     For reference, each Raspberry PI version's default wifi chipset:
#     - RPi0W     bcm43438 ou bcm43430a¹
#     - RPi3b     bcm43430a¹
#     - RPi3b+    bcm43455c0
# Optional variable (default:'brcmfmac brcmutil cfg80211 rfkill')
export _INITRAMFS_WIFI_DRIVERS='brcmfmac brcmutil cfg80211 rfkill'


# ROOT PASSWORD CHANGER settings ----------------------------------------------
# Hooks
#   optional-sys-rootpassword
#       Changes the system root password

## The new root password
export _ROOTPASSWD="#toor#"


# OPENVPN settings ------------------------------------------------------------
# Hooks
#   optional-sys-openvpn
#       Attemps to configure the system to use an VPN (as a client)

## Zip file containing 'client.conf' and any other deps (creds, certs, etc)
# Optional variable (default: "openvpn.zip")
export _OPENVPN_CONFIG_ZIP="openvpn.zip"
